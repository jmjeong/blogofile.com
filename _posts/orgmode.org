* Introduciton to Orgmode				       :example:orgmode:

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.

** Characteristics

*** Simplicity

Org-mode is a simple outliner for note-taking and list management. You
can learn the basics for using it in five minutes. This may be all you
need, and Org-mode will not impose more complex features on you.

*** Portability

Org files are plain text. You can view and edit them in any
editor. Your data is yours forever. Org-mode runs in Emacs, which is
available for nearly every platform.  Depth Org-mode will not let you
down when you need more than a simple outline. The full feature set is
both broad and deep. The typical answer to "Can it do X?" is "Yes!".

*** Flexibility

Org-mode is like a Swiss army knife. People use it for Getting Things
Done (GTD), as a Day Planner, as a Notebook, for Web and PDF
Authoring, and much more.  Support Org-mode is supported by an active
mailing list where questions are answered quickly and effectively.

*** It's free!

Org is open source software, it is free, like Emacs.

#+BEGIN_SRC c
#include <stdio.h>

int main()
{
   printf("hello world\n");
}
#+END_SRC


** Tag example

even more

This is *bold* /italics/ _underline_ [[http://emacs.org][Emacs]]

** Table example

| country | country |
|    123  | 123     |

** Source Code

#+BEGIN_SRC emacs-lisp
(setq remember-annotation-functions '(org-remember-annotation))
(setq remember-handler-functions '(org-remember-handler))
(add-hook 'remember-mode-hook 'org-remember-apply-template)

(defun jmjeong-c-mode-init ()
  (c-toggle-auto-hungry-state 1)
  (c-toggle-auto-newline 0)
  (c-set-style "stroustrup")
  (modify-syntax-entry ?_ "w")       ; now '_' is not considered a word-delimiter
  (c-set-offset 'member-init-intro '++)
  (setq c-tab-always-indent nil)
  ;; qt keywords and stuff ...
  ;; set up indenting correctly for new qt kewords
  (setq c-protection-key (concat "\\<\\(public\\|public slot\\|protected"
                                 "\\|protected slot\\|private\\|private slot"
                                 "\\)\\>")
        c-C++-access-key (concat "\\<\\(signals\\|public\\|protected\\|private"
                                 "\\|public slots\\|protected slots\\|private slots"
                                 "\\)\\>[ \t]*:"))
  (progn
    ;; modify the colour of slots to match public, private, etc ...
    (font-lock-add-keywords 'c++-mode
                            '(("\\<\\(slots\\|signals\\)\\>" . font-lock-type-face)))
    ;; make new font for rest of qt keywords
    (make-face 'qt-keywords-face)
    (set-face-foreground 'qt-keywords-face "BlueViolet")
    ;; qt keywords
    (font-lock-add-keywords 'c++-mode
                            '(("\\<Q_OBJECT\\>" . 'qt-keywords-face)))
    (font-lock-add-keywords 'c++-mode
                            '(("\\<SIGNAL\\|SLOT\\>" . 'qt-keywords-face)))
    (font-lock-add-keywords 'c++-mode
                            '(("\\<Q[A-Z][A-Za-z]*" . 'qt-keywords-face)))
    )
  (setq c-basic-offset 4 tab-width 4 indent-tabs-mode nil)
  (hs-minor-mode 1)
  (hide-ifdef-mode 1)
  (setq hide-ifdef-lines t)   			; if, ifdef 표시하지 않기
  (local-set-key "\C-c\C-c" 'compile)
  ;(local-set-key [(control return)] 'semantic-complete-analyze-inline)  ; control-enter를 cedet의 complete로 map
  (doxymacs-mode)
  (turn-on-eldoc-mode)
  )
#+END_SRC

